* 一二集
** 添加控制，绑定代码文件为组件
** 设置默认 editor 为 vscode, install vscode 插件
- both browser and scripting editor can be setting in External Program
- Developer > VS Code Workflow to add tasks: Cmd + P > "task Cocos Compile"
** Cc.component start method get component.String.value
** cc.log web 模式下同 console.log
* 3集
** 面向组件编程：依然有类
** 车里的零件：参考 WinForm, 各种各种的预置组件，Text, Label, etc
** Cocos 里的精灵也可以安装不同的组件，碰撞组件，音频组件等，二次拼装，大大的简化了开发。
** 精灵首先是一个 Node, 可以进行 frame 的渲然。
** 角本也是一个组件
** 结点是有层级结构的：相对于父结点的坐标，类似于容器的概念
** This.node.children[0].opacity 设置（记得要挂载角本组件）。可以锁住。
* 4集：精灵组件的使用
** 图片精灵，单色精灵，default_sprite
** Atlas: 多张小图压缩到一起的大图，然后找坐标，宽高再裁剪。减少 IO 次数。工具： texture packer， unity 引擎的 NGUI
** Type: simple 修改尺寸整体拉伸
*** 九宮格：边角拉伸时不会变型
*** 平铺：适合背景图
*** 填充：类似遮罩，适合做血条
*** 网格：不知道，不太用
** Size mode:
*** Trim: 裁剪空白部分
*** Raw / custom
** Blend: 两个或以上的精灵混合效果
** Materials: 材质，一般不用管
** cc.resources loader 拿 spriteFrame
* 5课：角本组件的使用
** 3.0 以后放弃支持 Js, 只支持 Ts
** scripts > new JS/TS (recommended to use TS, the JS syntax is very weird)
** TS follows ES6.0 standard
** cc._decorator: 注解类型 - 修饰符: @ccclass 识别为一个具体的组件; @property 修饰为属性就右 Cocos Creator 的面板里就可以用了
** 自带的数据类型，就不用给 @property() 里传递参数，但 cc.Label 或 cc.Button 需要
** 生命周期函数: Life-Cycle Callbacks (7 methods)
*** onLoad(): when the component is loaded
*** start():
*** onEnable() / onDisable()
- this.target.active = false
- this.target.active = true
*** update(dt) / lateUpdate(dt)
- update: run when each frame is to be updated, dt is the interval between frames
- lateUpdate: run after update() is done (less used)
*** onDestroy()
** how to invoke Nodes in scripts:
- this.node: e.g. this.node.x / this.node.y += this.speed * dt
- this.node.children / this.node.getChildByName("name")
- cc.find("node1/node2")
- this.node.getParent()
- this.node.setParent(node0)
- this.node.removeAllChildren()
- this.node.removeChild(node0)
- this.node.removeFrameParent()
- this.getComponent(cc.Component)
- this.getComponentInChildren(cc.Label).string = "hello world"
* 6课：交互事件
** ctrl + shift + P can refresh the game application
** 封装了三种不同的事件：鼠标、键盘、触摸
** Like JS: addEventListener("mousedown", (event) => {})
** In Cocos2d:
- this.node.on(eventType: String, callback: function, target: any, useCapture: boolean)
- note that a node is not a DOM element, so JS addEventListener does not work directly
- can either be in start() or onLoad()
- this.node.on(cc.Node.EventType.MOUSE_DOWN, (event: cc.Event.EventMouse) => { cc.log(event.getLocation()); })
- event.getLocation() | event.getButton()
- cc.Event.EventMouse.BUTTON_LEFT
- this.node.off(cc.Node.EventType.MOUSE_DOWN)
- this.node.clear(): clear all events in relation to this node
** Keyboard Events: 全局事件
- cc.systemEvent.on(eventType, callback)
- cc.systemEvent.on(cc.SystemEvent.KEY_DOWN, (event: cc.Event.EventKeyboard) => {cc.log(event.keyCode)})
- cc.macro.KEY.a
** Touch Events: like MouseEvents, but no buttons
- event.getID() can get how many fingers used
- this.node.on(cc.Node.EventType.TOUCH_START, (event: cc.Event.EventTouch) => {})
- TOUCH_CANCEL
** 自定义事件
- cc.find("Player").emit("msg", arg1..arg5);
- 例如：微信小游戏工具中的通知：子弹打中敌机、要通机敌机：你被打中了，快减血
** 自定义事件另一种方式：分发事件流
  - let event = new cc.Event.EventCustom("myEvent", true);
  - event.setUserData("hello")
  - event.detail = { date: new Date(), text: "hello"}
  - cc.find("Player").dispatchEvent(event)
* Lesson 7: collison check
** spriteA vs spriteB collison detection: add component - box / circle / polygon
** Editing the edges for the collison: use tag to identify each individual
** 碰撞检测的使用
- onCollisionEnter(other: cc.Collider, self: cc.Collider)
- onCollisionStay(other: cc.Collider, self: cc.Collider)
- onCollisionExit(other: cc.Collider, self: cc.Collider)
- cc.director.getCollisionManager().enabled = true // 开启碰撞管理器
- cc.director.getCollisionManager().enabledDebugDraw = true // 开启碰撞检测范围
- cc.director.getCollisionManager().enabledDrawBoundingBox = true // 开启碰撞检测边框
** 字弹飞出屏幕边界判断
- cc.view.getCanvasSize().height
** prefab: 预设体
- @property(cc.Prefab)
- setInterval(() => { cc.instantiate(this.bulletPrefab); bullet.x = this.node.x; bullet.y = this.node.y + this.node.height / 2; bullet.setParent(cc.director.getScene()); }, 1000)
- when bullets hit enemy: this.node.removeFromParent(); this.destory();
* Lesson 8: 图片资源和音频资源
** Cocos Creator 3.0 supports jpg / png / bmp; 2.4 only supports jpg / png
** 所有要 cc.resources.load 动态加载的都需要放在 resources 文件夹下
** sample
- cc.resources.load("images/hero", cc.SpriteFrame, (error: Error, sf: cc.SpriteFrame) => { this.getComponent(cc.Sprite).spriteFrame = sf})
- this.node.with = 40;
- this.node.height = 40;
- SpriteAtlas (图集) 也是一样的用法；
** 音频资源: mp3, wav, ogg
- 其他组件 > AudioSource
- Clip 是音频文件，可以直接从资源管理器中拖过来
- Volume 是音量，0~1 之间
- Mute / Loop / Play on Load
- 可以创建一个单独的节点来负责播放音频
- play() / stop() / pause() / resume() / isPlaying
** AudioEngine: 适合控制多个音频的播放
- cc.resources.load("audio/bgm", cc.AudioClip, (error, clip) => { cc.audioEngine.playMusic(clip, true); })
- playEffect
- play
- cc.resources.loadDir
* Lesson 9: 开发飞机大战
** Cocos 定时器
- schedule(callback: function, interval: number, repeat: number, delay: number)
** Demo
*** Player:
- onload: this.screenHeight = cc.view.getCanvasSize().height; this.screenWidth = cc.view.getCanvasSize().width
- start: this.isSelected = true or false base on he TOUCH_X events
- start: this.node.setPosition(e.getLocation()) base on TOUCH_MOVE events
*** Bullets:
- only need height, no need of width
- add an property to be speed = 200;
- update: this.node.y += this.speed * dt;
- update: if (this.node.y + this.node.height > this.screenHeight) this.node.removeFrameParent(true); this.destory();
- drag bullet node into resources to make it a prefab
- die(): need to call this method on Enemy by `other.getComponent(bullet)` in onCollisionEnter()
*** Player:
- @property(cc.Prefab) bulletPre = null (this shall be in Player.ts, not Bullet.ts)
- start: this.shedule(() => { this.shoot() }, shootInterval)
- shoot(): let bullet = cc.instantiate(this.bulletPre); bullet.x = this.node.x; bullet.y = this.node.y + this.node.height/2; bullet.setParent(cc.director.getScene)
- audio: cc.resources.load("audio/bullet", cc.AudioClip, (err, clip) => { cc.audioEngine.playEffect(clip, false) })
- add polygon collider
*** Enemy:
- add poygon collider
- start(): this.node.y = this.screenHeight + this.node.height
- start(): this.node.x = Math.random() * (this.screenWidth - this.node.width) + this.node.width / 2
- update(): this.node.y -= this.speed * dt
- onCollisionEnter(other: cc.Collider): if (other.tag == 9 && !this.isDead) { cc.find("Background").getComponent(Background).score++ }
  - else if (other.tag == 1 && !this.isDead) { cc.game.pause(); cc.audioEngine.stopAll(); alert("Game Over!"); }
- die():
  - cc.resources.load("audio/boom", cc.AudioClip, (err, clip) => {...} )
  - this.schedule(() => { cc.resources.load(`images/explosion${frameId}`, cc.SpriteFrame (error, sf) => {...})}, 0.1, 19, 0)

*** Background:
- @property(cc.Prefab) enemyPre
- start(): this.schedule(() => { let enemy = cc.instantiate(this.enemyPre) }, 1)
- onload(): cc.director.getCollisionManager().enabled = true;
* Lesson 10: 向量(vector)在游戏中的使用
** 向量 vs 标量
** 游戏中的移动速度、加速度，物体的受力，给物体施加的冲量等
** 子弹斜飞速度
- Vx = V * cos0; Vy = V & sin0
** 弧度： 弧长 / 半径
- let rad = (this.node.angle + 90) * Math.PI / 180
- this.node.x += this.speed * dt * Math.cos(rad)
- this.node.y += this.speed * dt * Math.sin(rad)
** rotate the Axis
** 空节点用处之一：用来定位，比如子弹发射的位置
** Node 可以锁定以防止误操作
** Demo: 坦克大战
*** Tank
- onload: this.cannon = this.node.getChildByName("cannon")
  - this.bulletPre = this.cannon.getChildByName("")
- start: cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN)
  - this.node.angle = ??; this.node.y += this.speed;
  - cannon: this.cannon.angle += 5;
  - if (this.cannon.angle == 360): this.cannon.angle = 0
- fire(): cc.resources.load("audio/fire", cc.AudioClip, (err, clip) => { .. })
  - let bullet = cc.instantiate(this.bulletPre)
  - bullet.setPosition(this.bulletPos.convertToWorldSpaceAR(cc.Vec2.ZERO))
  - bullet.angle = this.node.angle + this.cannon.angle
  - bullet.setParent(cc.director.getScene());
  - if (!this.reloading)
  - setTimeout(() => { this.reloading = false })
- shotgun effect:
  - let bullets: cc.Node[] = new Array<cc.Node>();
  - for (let i = 0; i < bullets.length; i++)
  - bullets[i].angle = this.node.angle + this.cannon.angle + 30 - i * 30
  - bullets[i].setPosition(this.bulletPos.convertToWorldSpaceAR(cc.Vec2.ZERO))
* Lesson 11-12: UI 组件
** 控件库 or 创建渲染组件或UI组件
** RichText: color / size / outline / b / i / u / on (e.g. click) / param / br /img
** Button: transition
- Click Events: 一般只有一个事件来处理就可以
** Layout 组件： 横向、纵向、网格
** EditBox: 常用在注册用户输入时；如果是微信小游戏，一般是获取信念授权
** Mask: 遮罩； can be inverted
** ScrollView: 滚动视图 > content > item - 可以用来作关卡的切换
** ProgressBar: 例如可以当血槽来用, 作格斗游戏的时候可以来用
** Slider: e.g. 音量大小
** Toggle: 单选框、复选框
** VideoPlayer
** WebView: 比较少用
* Lesson 13: 场景管理及动态加载
** 一般的游戏都会包含两个以上的场景（开始、游戏界面）
** 在 Cocos Creator 里一般用导演类 cc.director 来进行场景管理
** File > Ctrl + N 可以新建场景
** 切换:
*** 直接加载
- cc.director.loadScene(sceneName: string, onLaunched: function)
- onLaunched 中可以做一些旧场景的收尾工作，比如保存游戏数据
- gameStartHandler(): cc.director.loadScene("game", () => { cc.log("新场景已加载") })
- onDestroy(): 老场景内的组件
*** 预加载场景
- cc.director.preLoadScene(sceneName: string, onProgress: function, onLoaded: function)
- onProgress 参数: completedCount / totalCount / item
- 真正需要触发切换时: if(this.isNewSceneLoaded) { cc.director.loadScene("newScene") }
** 常驻节点: 可以用来在不同的场景间传递数据
- cc.game.addPersistRootNode(node);
- cc.game.removePersistRootNode(node);
- 使用方法：可以用一个空节点（DataNode），不渲染任何东西，然后给这个节点挂载 DataStore.ts
  - onLoad: cc.game.addPersistRootNode(this.node)
  - ShowScore.ts: start() : cc.find("DataNode").getComponent(DataStore)
* Lesson 14: 2d 物理引擎 - 刚体
** 两部分：碰撞 和 Box2D物理引擎 - 分别来模拟物理碰撞和物理特性
** 物理碰撞 和 普通碰撞是完全独立的，普通碰撞只是比较简单的碰撞捡测
** 物理碰撞用于摸拟真实的碰撞，例如一个篮球砸中一个空可乐瓶
** 刚体(Rigid Body)：理想的固体模型，受力后外形不发生形变的物体
- 选中节点 > 添加组件 > 物理组体 > Rigid Body
- cc.director.getPhysicsManager().enabled = true; (必须放在 onLoad 函数执行，否则不会生效)
** 刚体属性
- Enabled Contact Listener
- Bullet: 高速物体
- Type: 动态刚体(默认受到重力和其他外力的影响) / 静态刚体 (地面 / 建筑物) / Kinematic (受重力或其他阻力影响)
- Allow Sleep
- Gravity Scale: 重力的倍数的概念
- Linear Damping: 线性衰减 (例如台球游戏中的摩擦力)
- Angular Damping: 角速度的衰减
- Linear Velocity: 线速度
- Angular Velocity: 角速度
- Fixed Rotation: 和质心有关
- Awake On Load: 加载时就收物理系统的影响, 如果关掉的话，就要手动唤醒 (例如: 绳子断了灯往下掉)
  - this.node.getComponent(cc.RigidBody).awake = true;
** 刚体可以用代码设置的方法
- applyForce(cc.v2(1000, 0), cc.v2(0, 0), true); 力是瞬时的，不是持续的；否则就是加速运动了
- applyForceToCenter
- applyTorque(): 必须结合碰撞组件来使用
- applyLinearImpulse(): 线性冲量 - 时间段内，力对物体作用的积累效果，是力对时间的积分
* Lesson 15: 物理引擎 - 物理碰撞（PhysicsBoxCollider）
** 物理碰撞一定是和刚体一起使用
** 物理碰撞组件和普通碰撞组件一样，也可以编辑碰撞边界轮廓
** 属性
- Density: 一个轻的物体去撞一个密度大的物体
- Sensor: 只传感，但不会产生碰撞点，和碰撞效果。（FlappyBird: 飞过缝隙加一分）
- Friction: 摩擦系数, 两个表面都要设置摩擦系数才有用
- Restitution: 弹性系数
** 回调函数: 需要开启接触检测 - rb.enableContactListener = true;
- onBeginContact(contact, self, other)
- onEndContact(contact, self, other)
- onPreSolve(contact, self, other)
- onPostSolve(contact, self, other)
- contact: cc.PhysicsContact: 碰撞信息
- cc.PysicsCollider
** 碰撞信息
- colliderA / colliderB
- disabled
- disabledOnce
- getWorldMainfold(): normal(法线向量，碰撞方向)
- getMainfold()
- getImpulse()
- isTouching(): 是否已经接触
* Lesson 16: 物理检测
** 作用是用来查询物体在空间的谋个地方的信息，例如，在某个地方是否存在碰撞体
** 点检测、矩形检测、射线检测
*** 点检测: 在小游戏中用的比较少, 一般可以用传感器来替代
- let physicsCollider = cc.director.getPhysicsManager().testPoint(point);
- 只能用于测试动态刚体 (Dynamic RigidBody)
- 如果有多个刚体和这个点覆盖，只会返回一个随机的碰撞体 (其实刚体是不可以 overlap 的)
*** 矩形测试用法: 例如可以测检范围伤害, 也可以用传感器来替代
- let rect = cc.rect(x, y, w, h)
- let physicsColliders = cc.director.getPhysicsManager().testAABB(rect);
- 可以返回多个碰撞体
- 也是只能用于测试动态刚体 (Dynamic RigidBody)
*** 射线检测: 也可以理解为线段测试
- let results = cc.director.getPhysicsManager().rayCast(p1, p2, type);
- type:
  - cc.RayCastType.All - 所有的碰撞体所有的碰撞点的位置 (例如凹形物体)
  - cc.RayCastType.AllCloset - 所有的碰撞体最近的碰撞点的位置
  - cc.RayCastType.Any - 离起点越远的先返回
  - cc.RayCastType.Closet: default - 最近的碰撞点的位置
- result: collider / point / normal / fraction
- 什么类型的刚体都可以检测
- 作用: 可以用来实现游戏中 AI / NPC 的自动寻路功能
** 自动寻路功能实例
*** 先用单色结点画几个 Wall, 是 static rigid body
*** Create bird sprite and Bird.ts: 每 100 毫秒从鸟的位置和它移动的方向来发射一条射线
- disable gravity
- start():
  - let rigidBody = this.getComponent(cc.RigidBody);
  - rigidBody.linearVelocity = cc.v2(this.direction.x * this.speed, this.direction.y * this.speed)
  - setInterval(() => { ... }, 100) // 每 100ms 发射一次射线 (每100ms 做一次射线检测)
    - let results = manager.rayCast(this.node.getPosition(), cc.v2(this.node.x + this.direction.x * 30, this.node.y + this.direction.y * 30), cc.RayCastType.Closet)
*** 加一个传感器或者作一次矩形检测
- onEndContact(contact, self, other) { if (other.tag == 10 ) alert("走出来了"); }
* Lesson 17: 動畫系統
** 其他组件 > Animation > 填加 Default Clip
** 动画编辑器 > 新建 Clip 文件 > BirdAni > 打开/关闭编辑模式
** 关键帧动画 vs 序列帧动画
- 关键帧：在两个关键帧中间自动补全
** Sample / Speed
** 关键帧动画 Steps:
- Add Property > Right Click > 插入关键帧
- On another frame update the according property again
- 也可以清空关键帧
- Play On Load
- WrapMode:
  - normal
  - loop
  - pingpong: 正返着来
- double click the Line between key frames to edit the animation behavior, default is linear
** 序列帧动画
- Add Property > cc.Sprite.spriteFrame
- drag all the frames to the animation panel
** 帧事件
- 选定一帧，点“插入帧事件”
- 指定挂载 script 的回调函数
** Sample: Game Over
- start(): this.node.no(cc.Node.EventType.MOUSE_DOWN, () => {})
- let ani = this.getComponent(cc.Animation)
- ani.play("GameOver")
** cc.tween 兼容 action
* Lesson 18: 动作系统 (Action System)
** 与动画系统的区别：动画是提前编辑好的 Clip
** 动作系统是代码控制：像是演奏乐器，而不是提前录好的 MP3
** 在游戏中的应用非常广泛
** 注意 Action 现在被 Tween 替代了
** Bird Sample
- start()
  - let action = cc.moveTo(duration: number, position: number | cc.Vec2, y?: number)
  - this.node.runAction(action)
** Other methods:
- moveBy(): move to relative position
- rotateTo / rotateBy
- scaleTo / scaleBy
- jumpTo: 类似 moveTo, 但不是直线运动
- jumpBy
- skewTo / skewBy
- bezierTo / bezierBy
- blink
- fadeTo / fadeIn / fadeOut
- tintTo / tintBy: change color
** 瞬发动作： ActionInstant （compare to ActionInterval）
- show() / hide()
- toggleVisbility()
- flipX() / flipY()
- place()
- callFunc(): 执行回调函数
** 动作执行
- runAction / stopAction / stopAllAction
- action.setTag
- stopActionByTag
- pauseAllActions()
- resumeAllActions()
** 容器动作: 可以理解为一序列的动作 或 重复动作
- let action1 = cc.moveBy(1, 800, 0)
- let action2 = cc.rotate(1, 360)
- let seq = cc.sequence([action1, cc.delayTime(1), action2])
- this.node.runAction(seq)
- let repeat = cc.repeat(action2, 3) // or repeatForEver
- this.node.runAction(repeat)
** 多个动作同时执行 / 并列执行
- let spawn = cc.spawn(action1, action2)
- this.node.runAction(spawn)
** 缓动动作
- easeIn / easeOut / easeInOut / easeXXXX
- let action1 = cc.moveBy()
- action1.easing(cc.easeIn(4));
- this.node.runAction(action1) // 节点会加速运动
** Tween 对象: 链式调用
- cc.tween(this.node).to(4, {x: 800, y:500, angle: 360}, cc.easeXXX()).call(() => {...}).to(...).start()
- Tween 也可以兼容 action： cc.tween()...then(action).start()
* Lesson 19: 粒子系统
** 也是用组件的形式 > 渲染节点 > 粒子系统
** Custom 属性
- duration: -1 表示一直播放
- Auto Remove on Finish: 自动消毁运行的节点 (onDestroy)
- Emission Rate: 粒子每秒钟发射的个数
- Life: 粒子的生存时间
- Total Particles
- Position Type: Free / Relative / Grouped
- Emitter Mode: Gravity / Radius
** Demo
- bird > boomParticle (一开始设为不可用)
- Bird.ts
- boomParticle: cc.Node
- this.boomParticle = this.node.children[0]
- start(): this.node.on(cc.Node.EventType.TOUCH_START, () => { ... })
- cc.tween(this.node).by(3, { y: 400 }).call(() => { this.boomParicle.actve = true; let ps = this.boomParticle.getComponent(cc.ParticleSystem); ps.resetSystem(); }).start()
** 粒子系统不太推荐，因为计算量大
* Lesson 20: 数据本地存储
** 例如单机游戏里，可以方便下次打开游戏时还可以读取这些数据
** 通过 Javascript 的 localStorage 对象 (页游)
- cc.sys.localStorage
- setItem / getItem / removeItem
** 微信小游戏是用 wx.setStorage / getStorage
** JSON 数据的应用
- let pData = Object.assign(new PlayData(), JSON.parse(jsonStr))
* Lesson 21: Web服务器
** 略
* Lesson 22: Socket概念(套接字)
** 应用进程之间进行双向通信端点的抽象, 提供了应用层进程利用网络交换数据的机制
** 上联应用进程、下联网络协议
** Http 适用场景
- 资源加载、退出游戏时保存数据上传
- 不太适合和服务器交换一些不太需要实时更新的数据
** Socket
- 两个网络端点之间建立一个长效的通信通道, 在一直可用的情况下更适合实时数据的交换
- 表示方法 - IP地址:端口号
** Socket 工作流程: client socket / server socket
- 服务器启动监听
- 客户端请求连接
- 服务端确认连接
** Socket在游戏中的应用
- 局域网对战游戏: 红警、星际争霸、CS
  - 有一个玩家会充光服务端（一般是房主）
  - 房主会用 UDP 向局域网内所有的机器广播开了一个房音
- 网络在线对战平台: 盛大、浩方
  - 本质上还是局域网实现，只不过利用了虚拟 IP 技术
- 网络游戏
  - 不需要玩家来充当服务器
  - 网络游戏公司会单独提供服务器来运行 Server Socket 的代码
  - 不需要运行游戏的代码逻辑，只专注于收发数据与转发数据
* Other ticks
- [[https://docs.cocos.com/creator/manual/zh/scripting/access-node-component.html][访问节点和组件]]

* References:
- https://gamemath.com/
- https://github.com/PacktPublishing/Mathematics-for-Game-Programming-and-Computer-Graphics
